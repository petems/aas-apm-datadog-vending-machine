name: Terraform Plan

on:
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-plan.yml'
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Target environment for the plan'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  TERRAFORM_VERSION: '1.9.5'
  TERRAFORM_DIR: './terraform'
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="environment=${{ github.event.inputs.target_environment || 'dev' }}"
        working-directory: ${{ env.TERRAFORM_DIR }}
        continue-on-error: true

      - name: Generate Plan Summary
        id: plan_summary
        if: steps.plan.outcome == 'success'
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform show -no-color tfplan > plan.txt
          
          # Extract summary information
          RESOURCES_TO_ADD=$(grep -c "will be created" plan.txt || echo 0)
          RESOURCES_TO_CHANGE=$(grep -c "will be updated" plan.txt || echo 0)
          RESOURCES_TO_DESTROY=$(grep -c "will be destroyed" plan.txt || echo 0)
          
          echo "add=$RESOURCES_TO_ADD" >> $GITHUB_OUTPUT
          echo "change=$RESOURCES_TO_CHANGE" >> $GITHUB_OUTPUT
          echo "destroy=$RESOURCES_TO_DESTROY" >> $GITHUB_OUTPUT
          
          # Create a concise plan summary
          if [ "$RESOURCES_TO_ADD" -eq 0 ] && [ "$RESOURCES_TO_CHANGE" -eq 0 ] && [ "$RESOURCES_TO_DESTROY" -eq 0 ]; then
            echo "summary=No changes. Infrastructure is up-to-date." >> $GITHUB_OUTPUT
          else
            echo "summary=Plan: $RESOURCES_TO_ADD to add, $RESOURCES_TO_CHANGE to change, $RESOURCES_TO_DESTROY to destroy." >> $GITHUB_OUTPUT
          fi

      - name: Create Plan Artifact
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.TERRAFORM_DIR }}/tfplan
          retention-days: 7

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan_outcome = '${{ steps.plan.outcome }}';
            const init_outcome = '${{ steps.init.outcome }}';
            
            let comment = '## Terraform Plan Results\n\n';
            
            if (init_outcome !== 'success') {
              comment += '❌ **Terraform initialization failed!**\n\n';
              comment += 'Please check the workflow logs for details.\n';
            } else if (plan_outcome !== 'success') {
              comment += '❌ **Terraform plan failed!**\n\n';
              comment += 'Please check the workflow logs for details.\n';
            } else {
              const summary = '${{ steps.plan_summary.outputs.summary }}';
              const add = '${{ steps.plan_summary.outputs.add }}';
              const change = '${{ steps.plan_summary.outputs.change }}';
              const destroy = '${{ steps.plan_summary.outputs.destroy }}';
              
              comment += '✅ **Terraform plan succeeded!**\n\n';
              comment += `### Summary\n${summary}\n\n`;
              
              if (add !== '0' || change !== '0' || destroy !== '0') {
                comment += '### Resource Changes\n';
                comment += '| Action | Count |\n';
                comment += '|--------|-------|\n';
                if (add !== '0') comment += `| Create | ${add} |\n`;
                if (change !== '0') comment += `| Update | ${change} |\n`;
                if (destroy !== '0') comment += `| Delete | ${destroy} |\n`;
                comment += '\n';
              }
              
              comment += '<details><summary>Show Plan</summary>\n\n';
              comment += '```terraform\n';
              comment += `${{ steps.plan.outputs.stdout }}`;
              comment += '\n```\n\n</details>\n';
            }
            
            comment += '\n---\n';
            comment += `Environment: \`${{ github.event.inputs.target_environment || 'dev' }}\`\n`;
            comment += `Workflow: [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
            
            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results');
            });
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1