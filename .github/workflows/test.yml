name: 'Test & Quality Checks'

on:
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'terraform/**'
  pull_request:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - 'terraform/**'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # Quality checks job
  quality:
    name: 'Code Quality'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: TypeScript type check
        run: yarn type-check

      - name: ESLint check
        run: yarn lint

      - name: Prettier format check
        run: yarn format:check

  # Unit tests job
  test:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests with coverage
        run: yarn test:ci

      - name: Upload coverage to Codecov
        if: success()
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build job to ensure everything builds correctly
  build:
    name: 'Build Check'
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build
        env:
          # Use a dummy client ID for build testing
          REACT_APP_CLIENT_ID: 'test-client-id'

      - name: Check bundle size
        run: |
          echo "### Bundle Size Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          du -sh build/static/js/*.js | while read size file; do
            filename=$(basename "$file")
            echo "| $filename | $size |" >> $GITHUB_STEP_SUMMARY
          done

  # Matrix testing across multiple Node versions
  test-matrix:
    name: 'Test Node ${{ matrix.node-version }}'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        node-version: ['18', '20', '22']
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run tests
        run: yarn test:ci

  # Security audit
  security:
    name: 'Security Audit'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: yarn audit --level moderate || true

      - name: Check for known vulnerabilities
        run: yarn audit-ci --moderate 