name: Terraform Drift Detection

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      send_notification:
        description: 'Send notification on drift detection'
        required: false
        default: true
        type: boolean

env:
  TERRAFORM_VERSION: '1.9.5'
  TERRAFORM_DIR: './terraform'
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

jobs:
  drift-detection:
    name: Detect Configuration Drift
    runs-on: ubuntu-latest
    
    outputs:
      has_drift: ${{ steps.detect_drift.outputs.has_drift }}
      drift_summary: ${{ steps.detect_drift.outputs.summary }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Detect Drift
        id: detect_drift
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          
          # Create a plan and check if there are any changes
          terraform plan -detailed-exitcode -no-color -out=tfplan > plan_output.txt 2>&1 || EXIT_CODE=$?
          
          # Exit codes: 0 = no changes, 1 = error, 2 = changes present
          if [ "${EXIT_CODE:-0}" -eq 2 ]; then
            echo "has_drift=true" >> $GITHUB_OUTPUT
            
            # Extract summary information
            RESOURCES_TO_ADD=$(grep -c "will be created" plan_output.txt || echo 0)
            RESOURCES_TO_CHANGE=$(grep -c "will be updated" plan_output.txt || echo 0)
            RESOURCES_TO_DESTROY=$(grep -c "will be destroyed" plan_output.txt || echo 0)
            
            echo "summary=Drift detected: $RESOURCES_TO_ADD to add, $RESOURCES_TO_CHANGE to change, $RESOURCES_TO_DESTROY to destroy" >> $GITHUB_OUTPUT
            
            # Save the plan output for the issue
            echo "## Drift Detection Report" > drift_report.md
            echo "" >> drift_report.md
            echo "Configuration drift has been detected in the Terraform-managed infrastructure." >> drift_report.md
            echo "" >> drift_report.md
            echo "### Summary" >> drift_report.md
            echo "- Resources to be created: $RESOURCES_TO_ADD" >> drift_report.md
            echo "- Resources to be changed: $RESOURCES_TO_CHANGE" >> drift_report.md
            echo "- Resources to be destroyed: $RESOURCES_TO_DESTROY" >> drift_report.md
            echo "" >> drift_report.md
            echo "### Detailed Plan Output" >> drift_report.md
            echo '```' >> drift_report.md
            cat plan_output.txt >> drift_report.md
            echo '```' >> drift_report.md
          else
            echo "has_drift=false" >> $GITHUB_OUTPUT
            echo "summary=No drift detected - infrastructure is in sync" >> $GITHUB_OUTPUT
          fi

      - name: Upload Drift Report
        if: steps.detect_drift.outputs.has_drift == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: drift-report
          path: |
            ${{ env.TERRAFORM_DIR }}/drift_report.md
            ${{ env.TERRAFORM_DIR }}/plan_output.txt
          retention-days: 30

      - name: Create Issue for Drift
        if: steps.detect_drift.outputs.has_drift == 'true' && (github.event_name == 'schedule' || github.event.inputs.send_notification == 'true')
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const driftReport = fs.readFileSync('${{ env.TERRAFORM_DIR }}/drift_report.md', 'utf8');
            
            // Check if there's already an open drift issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['terraform-drift', 'infrastructure']
            });
            
            const existingIssue = issues.find(issue => issue.title.includes('Terraform Configuration Drift Detected'));
            
            const issueBody = `${driftReport}
            
---
**Detection Time**: ${new Date().toISOString()}
**Workflow Run**: [View Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

### Recommended Actions
1. Review the drift to understand what changed
2. If the changes were made outside Terraform:
   - Either import the changes into Terraform state
   - Or revert the manual changes
3. If the drift is expected, update the Terraform configuration
4. Run \`terraform apply\` to reconcile the differences

### Automation Note
This issue was automatically created by the Terraform Drift Detection workflow.
`;
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: `## New Drift Detection\n\n${issueBody}`
              });
              
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const { data: issue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '⚠️ Terraform Configuration Drift Detected',
                body: issueBody,
                labels: ['terraform-drift', 'infrastructure', 'automation']
              });
              
              console.log(`Created new issue #${issue.number}`);
            }

  notify-slack:
    name: Notify Slack
    needs: drift-detection
    if: needs.drift-detection.outputs.has_drift == 'true' && vars.SLACK_WEBHOOK_URL != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Send Slack Notification
        run: |
          curl -X POST ${{ vars.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d '{
              "text": "⚠️ Terraform Drift Detected",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*⚠️ Terraform Configuration Drift Detected*\n${{ needs.drift-detection.outputs.drift_summary }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }'